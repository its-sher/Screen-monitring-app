"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _rest = require("@octokit/rest");
var _pluginRetry = require("@octokit/plugin-retry");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const logInfo = (0, _debug).default('electron-forge:publisher:github:info');
const logDebug = (0, _debug).default('electron-forge:publisher:github:debug');
class GitHub {
    constructor(authToken = undefined, requireAuth = false, options = {}){
        const noOp = ()=>{
        /* Intentionally does nothing */ };
        this.options = {
            ...options,
            log: {
                debug: logDebug.enabled ? logDebug : noOp,
                error: console.error,
                info: logInfo.enabled ? logInfo : noOp,
                warn: console.warn
            },
            userAgent: 'Electron Forge'
        };
        if (authToken) {
            this.token = authToken;
        } else if (process.env.GITHUB_TOKEN) {
            this.token = process.env.GITHUB_TOKEN;
        } else if (requireAuth) {
            throw new Error('Please set GITHUB_TOKEN in your environment to access these features');
        }
    }
    getGitHub() {
        const options = {
            ...this.options
        };
        if (this.token) {
            options.auth = this.token;
        }
        const RetryableOctokit = _rest.Octokit.plugin(_pluginRetry.retry);
        const github = new RetryableOctokit(options);
        return github;
    }
}
exports.default = GitHub;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2dpdGh1Yi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgT2N0b2tpdCB9IGZyb20gJ0BvY3Rva2l0L3Jlc3QnO1xuaW1wb3J0IHsgcmV0cnkgfSBmcm9tICdAb2N0b2tpdC9wbHVnaW4tcmV0cnknO1xuaW1wb3J0IHsgT2N0b2tpdE9wdGlvbnMgfSBmcm9tICdAb2N0b2tpdC9jb3JlL2Rpc3QtdHlwZXMvdHlwZXMuZCc7XG5cbmNvbnN0IGxvZ0luZm8gPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6cHVibGlzaGVyOmdpdGh1YjppbmZvJyk7XG5jb25zdCBsb2dEZWJ1ZyA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpwdWJsaXNoZXI6Z2l0aHViOmRlYnVnJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdpdEh1YiB7XG4gIHByaXZhdGUgb3B0aW9uczogT2N0b2tpdE9wdGlvbnM7XG5cbiAgdG9rZW4/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYXV0aFRva2VuOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsIHJlcXVpcmVBdXRoID0gZmFsc2UsIG9wdGlvbnM6IE9jdG9raXRPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBub09wID0gKCkgPT4ge1xuICAgICAgLyogSW50ZW50aW9uYWxseSBkb2VzIG5vdGhpbmcgKi9cbiAgICB9O1xuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGxvZzoge1xuICAgICAgICBkZWJ1ZzogbG9nRGVidWcuZW5hYmxlZCA/IGxvZ0RlYnVnIDogbm9PcCxcbiAgICAgICAgZXJyb3I6IGNvbnNvbGUuZXJyb3IsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICBpbmZvOiBsb2dJbmZvLmVuYWJsZWQgPyBsb2dJbmZvIDogbm9PcCxcbiAgICAgICAgd2FybjogY29uc29sZS53YXJuLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIH0sXG4gICAgICB1c2VyQWdlbnQ6ICdFbGVjdHJvbiBGb3JnZScsXG4gICAgfTtcblxuICAgIGlmIChhdXRoVG9rZW4pIHtcbiAgICAgIHRoaXMudG9rZW4gPSBhdXRoVG9rZW47XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5HSVRIVUJfVE9LRU4pIHtcbiAgICAgIHRoaXMudG9rZW4gPSBwcm9jZXNzLmVudi5HSVRIVUJfVE9LRU47XG4gICAgfSBlbHNlIGlmIChyZXF1aXJlQXV0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2Ugc2V0IEdJVEhVQl9UT0tFTiBpbiB5b3VyIGVudmlyb25tZW50IHRvIGFjY2VzcyB0aGVzZSBmZWF0dXJlcycpO1xuICAgIH1cbiAgfVxuXG4gIGdldEdpdEh1YigpOiBPY3Rva2l0IHtcbiAgICBjb25zdCBvcHRpb25zOiBPY3Rva2l0T3B0aW9ucyA9IHsgLi4udGhpcy5vcHRpb25zIH07XG4gICAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICAgIG9wdGlvbnMuYXV0aCA9IHRoaXMudG9rZW47XG4gICAgfVxuICAgIGNvbnN0IFJldHJ5YWJsZU9jdG9raXQgPSBPY3Rva2l0LnBsdWdpbihyZXRyeSk7XG4gICAgY29uc3QgZ2l0aHViID0gbmV3IFJldHJ5YWJsZU9jdG9raXQob3B0aW9ucyk7XG4gICAgcmV0dXJuIGdpdGh1YjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImxvZ0luZm8iLCJkZWJ1ZyIsImxvZ0RlYnVnIiwiR2l0SHViIiwiYXV0aFRva2VuIiwidW5kZWZpbmVkIiwicmVxdWlyZUF1dGgiLCJvcHRpb25zIiwibm9PcCIsImxvZyIsImVuYWJsZWQiLCJlcnJvciIsImNvbnNvbGUiLCJpbmZvIiwid2FybiIsInVzZXJBZ2VudCIsInRva2VuIiwicHJvY2VzcyIsImVudiIsIkdJVEhVQl9UT0tFTiIsIkVycm9yIiwiZ2V0R2l0SHViIiwiYXV0aCIsIlJldHJ5YWJsZU9jdG9raXQiLCJPY3Rva2l0IiwicGx1Z2luIiwicmV0cnkiLCJnaXRodWIiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQWtCLEdBQU8sQ0FBUCxNQUFPO0FBQ0QsR0FBZSxDQUFmLEtBQWU7QUFDakIsR0FBdUIsQ0FBdkIsWUFBdUI7Ozs7OztBQUc3QyxLQUFLLENBQUNBLE9BQU8sT0FBR0MsTUFBSyxVQUFDLENBQXNDO0FBQzVELEtBQUssQ0FBQ0MsUUFBUSxPQUFHRCxNQUFLLFVBQUMsQ0FBdUM7TUFFekNFLE1BQU07Z0JBS2JDLFNBQTZCLEdBQUdDLFNBQVMsRUFBRUMsV0FBVyxHQUFHLEtBQUssRUFBRUMsT0FBdUIsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDO1FBQ3pHLEtBQUssQ0FBQ0MsSUFBSSxPQUFTLENBQUM7UUFDbEIsRUFBZ0MsQUFBaEMsNEJBQWdDLEFBQWhDLEVBQWdDLENBQ2xDLENBQUM7UUFFRCxJQUFJLENBQUNELE9BQU8sR0FBRyxDQUFDO2VBQ1hBLE9BQU87WUFDVkUsR0FBRyxFQUFFLENBQUM7Z0JBQ0pSLEtBQUssRUFBRUMsUUFBUSxDQUFDUSxPQUFPLEdBQUdSLFFBQVEsR0FBR00sSUFBSTtnQkFDekNHLEtBQUssRUFBRUMsT0FBTyxDQUFDRCxLQUFLO2dCQUNwQkUsSUFBSSxFQUFFYixPQUFPLENBQUNVLE9BQU8sR0FBR1YsT0FBTyxHQUFHUSxJQUFJO2dCQUN0Q00sSUFBSSxFQUFFRixPQUFPLENBQUNFLElBQUk7WUFDcEIsQ0FBQztZQUNEQyxTQUFTLEVBQUUsQ0FBZ0I7UUFDN0IsQ0FBQztRQUVELEVBQUUsRUFBRVgsU0FBUyxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUNZLEtBQUssR0FBR1osU0FBUztRQUN4QixDQUFDLE1BQU0sRUFBRSxFQUFFYSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsWUFBWSxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDSCxLQUFLLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxZQUFZO1FBQ3ZDLENBQUMsTUFBTSxFQUFFLEVBQUViLFdBQVcsRUFBRSxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxHQUFHLENBQUNjLEtBQUssQ0FBQyxDQUFzRTtRQUN4RixDQUFDO0lBQ0gsQ0FBQztJQUVEQyxTQUFTLEdBQVksQ0FBQztRQUNwQixLQUFLLENBQUNkLE9BQU8sR0FBbUIsQ0FBQztlQUFJLElBQUksQ0FBQ0EsT0FBTztRQUFDLENBQUM7UUFDbkQsRUFBRSxFQUFFLElBQUksQ0FBQ1MsS0FBSyxFQUFFLENBQUM7WUFDZlQsT0FBTyxDQUFDZSxJQUFJLEdBQUcsSUFBSSxDQUFDTixLQUFLO1FBQzNCLENBQUM7UUFDRCxLQUFLLENBQUNPLGdCQUFnQixHQUFHQyxLQUFPLFNBQUNDLE1BQU0sQ0FBQ0MsWUFBSztRQUM3QyxLQUFLLENBQUNDLE1BQU0sR0FBRyxHQUFHLENBQUNKLGdCQUFnQixDQUFDaEIsT0FBTztRQUMzQyxNQUFNLENBQUNvQixNQUFNO0lBQ2YsQ0FBQzs7a0JBdENrQnhCLE1BQU0ifQ==