"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PublisherGitHubConfig", {
    enumerable: true,
    get: function() {
        return _config.PublisherGitHubConfig;
    }
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _mimeTypes = _interopRequireDefault(require("mime-types"));
var _path = _interopRequireDefault(require("path"));
var _publisherBase = _interopRequireDefault(require("@electron-forge/publisher-base"));
var _github = _interopRequireDefault(require("./util/github"));
var _noReleaseError = _interopRequireDefault(require("./util/no-release-error"));
var _config = require("./Config");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class PublisherGithub extends _publisherBase.default {
    async publish({ makeResults  }) {
        const { config  } = this;
        const perReleaseArtifacts = {};
        for (const makeResult of makeResults){
            const release = makeResult.packageJSON.version;
            if (!perReleaseArtifacts[release]) {
                perReleaseArtifacts[release] = [];
            }
            perReleaseArtifacts[release].push(makeResult);
        }
        if (!(config.repository && typeof config.repository === 'object' && config.repository.owner && config.repository.name)) {
            throw new Error('In order to publish to github you must set the "github_repository.owner" and "github_repository.name" properties in your Forge config. See the docs for more info');
        }
        const github = new _github.default(config.authToken, true, config.octokitOptions);
        const octokit = github.getGitHub();
        for (const releaseVersion of Object.keys(perReleaseArtifacts)){
            let release;
            const artifacts = perReleaseArtifacts[releaseVersion];
            var _tagPrefix;
            const releaseName = `${(_tagPrefix = config.tagPrefix) !== null && _tagPrefix !== void 0 ? _tagPrefix : 'v'}${releaseVersion}`;
            await (0, _asyncOra).asyncOra(`Searching for target release: ${releaseName}`, async ()=>{
                try {
                    release = (await github.getGitHub().repos.listReleases({
                        owner: config.repository.owner,
                        repo: config.repository.name,
                        per_page: 100
                    })).data.find((testRelease)=>testRelease.tag_name === releaseName
                    );
                    if (!release) {
                        throw new _noReleaseError.default(404);
                    }
                } catch (err) {
                    if (err instanceof _noReleaseError.default && err.code === 404) {
                        // Release does not exist, let's make it
                        release = (await github.getGitHub().repos.createRelease({
                            owner: config.repository.owner,
                            repo: config.repository.name,
                            tag_name: releaseName,
                            name: releaseName,
                            draft: config.draft !== false,
                            prerelease: config.prerelease === true
                        })).data;
                    } else {
                        // Unknown error
                        throw err;
                    }
                }
            });
            let uploaded = 0;
            await (0, _asyncOra).asyncOra(`Uploading Artifacts ${uploaded}/${artifacts.length} to ${releaseName}`, async (uploadSpinner)=>{
                const updateSpinner = ()=>{
                    uploadSpinner.text = `Uploading Artifacts ${uploaded}/${artifacts.length} to ${releaseName}`;
                };
                const flatArtifacts = [];
                for (const artifact of artifacts){
                    flatArtifacts.push(...artifact.artifacts);
                }
                await Promise.all(flatArtifacts.map(async (artifactPath)=>{
                    const done = ()=>{
                        uploaded += 1;
                        updateSpinner();
                    };
                    const artifactName = _path.default.basename(artifactPath);
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    if (release.assets.find((asset)=>asset.name === artifactName
                    )) {
                        return done();
                    }
                    await github.getGitHub().repos.uploadReleaseAsset({
                        owner: config.repository.owner,
                        repo: config.repository.name,
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        release_id: release.id,
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        url: release.upload_url,
                        // https://github.com/octokit/rest.js/issues/1645
                        data: await _fsExtra.default.readFile(artifactPath),
                        headers: {
                            'content-type': _mimeTypes.default.lookup(artifactPath) || 'application/octet-stream',
                            'content-length': (await _fsExtra.default.stat(artifactPath)).size
                        },
                        name: _path.default.basename(artifactPath)
                    });
                    return done();
                }));
            });
        }
    }
    constructor(...args){
        super(...args);
        this.name = 'github';
    }
}
exports.default = PublisherGithub;

//# sourceMappingURL=data:application/json;base64,